Logistic_Regression

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler

col_name = ['University_Mrks','School_Mrks','Admission']
data = pd.read_csv('Student-University.csv')

data.head()

x = data.iloc[:,[0,1]].values
y = data.iloc[:,2].values

x

y

from sklearn import preprocessing
p=preprocessing.scale(x)
kf=KFold(n_splits=5)

for train_index,test_index in kf.split(p):
    xtrain,xtest,ytrain,ytest=train_test_split(p,y,test_size=0.20,random_state=0)
    x1=xtrain[:,0]
    x2=xtrain[:,1]
    b0=0.0
    b1=0.0
    b2=0.0
    epoch=10000
    alpha=0.001
    while(epoch>0):
        for i in range(len(xtrain)):
            prediction=1/(1+np.exp(-(b0+b1*x1[i]+b2*x2[i])))
            b0=b0+alpha*(ytrain[i]-prediction)*prediction*(1-prediction)*1.0
            b1=b1+alpha*(ytrain[i]-prediction)*prediction*(1-prediction)*x1[i]
            b2=b2+alpha*(ytrain[i]-prediction)*prediction*(1-prediction)*x2[i]
            epoch=epoch-1
            
print(b0)
print(b1)
print(b2)

final_prediction =[]
x3 = xtest[:,0]
x4 = xtest[:,1]


for i in range(len(xtest)):
    y_pred[i]=np.round(1/(1+np.exp(-(b0+b1*x3[i]+b2*x4[i]))))
    
final_prediction.append(np.ceil(y_pred[i])  )
print(final_prediction)

from sklearn.metrics import accuracy_score
print("accuracy :",accuracy_score(ytest,y_pred))